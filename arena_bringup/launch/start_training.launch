<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="model" default="burger"      doc="model type [burger, jackal, ridgeback, agvota, rto, rto_real]"/>

  <!-- Here are the argument that may be frequently changed -->
  <arg name="ns_prefix" default="sim" />
  <arg name="num_envs" default="1" />

  <param name="single_env" value="false" />

  <!-- train mode  -->
  <arg name="train_mode" default="true"/>

  <!-- To make the training more efficient make sure this step_size*laser_update_rate == 1  -->
  <arg name="show_viz" default="true"/>

  <!-- the folder name under the path simulator_setup/maps  -->
  <arg name="map_folder_name" default="map_empty" />

  <!-- if it's false flatland server will not publish any debug related infomation and you will not able to visuzalize e.g robot, dynamic obstacles  -->
  <!-- <param name="space_encoder" value="UniformEncoder" /> -->

  <rosparam command="load" file="$(find arena-simulation-setup)/robot/$(arg model)/model_params.yaml" /> 
  <param name="robot_yaml_path" value="$(find arena-simulation-setup)/robot/$(arg model)/$(arg model).model.yaml" />
  <param name="tmp_model_path" value="/tmp" />

  <rosparam command="load" file="$(find arena_bringup)/params/flatland.yaml" />
  <rosparam command="load" file="$(find arena_bringup)/params/drl.yaml" />

  <!--  PARAMS DON'T CHANGE THEM  -->
  <param name="use_sim_time" value="true" />
  <param name="train_mode" value="$(arg train_mode)" />
  <param name="num_envs" value="$(arg num_envs)" />
  <arg name="map_path" default="$(find arena-simulation-setup)/maps/$(arg map_folder_name)/map.yaml" />
  <param name="world_path" value="$(find arena-simulation-setup)/maps/$(arg map_folder_name)/map.world.yaml" />
  <param name="show_viz" value="$(arg show_viz)"/>
  <param name="_dedicated_train_launch" value="true" />


  <!-- map server-->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_path)">
    <!-- In multi-env training /clock not available, since we only want one map_server, it's clock topic is remapped to /clock -->
    <remap from="/clock" to="/$(arg ns_prefix)1/clock" />
  </node>

  <group if="$(eval arg('train_mode') == false)">
    <!-- makes sure that action's will be published according to sim time in eval mode-->
    <node name="action_publisher" pkg="arena_local_planner_drl" type="action_publisher.py"/>
  </group>

  <!-- set the log format -->
  <env name="ROSCONSOLE_FORMAT" value="[${severity} ${time} ${logger}]: ${message}" />
  <include file="$(find arena_bringup)/launch/training/single_env_training.launch">
    <arg name="ns" value="eval_sim" />
  </include>

  <include file="$(find arena_bringup)/launch/training/start_envs.launch">
    <arg name="num_envs" value="$(arg num_envs)" />
    <arg name="ns_prefix" value="$(arg ns_prefix)" />
  </include> 

</launch>