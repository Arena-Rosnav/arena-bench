<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- CONSTANTS -->
  <param name="local_planner" value="rosnav" />

  <arg name="simulator" default="flatland" doc="[flatland, unity]" />
  <param name="simulator" value="$(arg simulator)" />

  <!-- Here are the argument that may be frequently changed -->
  <arg name="cfg" default="" doc="File name of the config file."/>

  <arg name="ns_prefix" default="sim" />
  <arg name="num_envs" default="1" />

  <!-- unity specific -->
  <!-- DISCLAIMER: The time_scale is currently not supported. 
       Enable it by:
          pedsim_engine/pedsim_simulator/src/simulator.cpp:184: change 'WallRate' to 'Rate'
       Why it is not enabled:
          Making pedsim use Rate breaks Flatland and Gazebo. Can be fixed for Flatland but didn't
          find how to fix it for Gazebo.
       Only enable it temporarily for training with Unity if desired but do not push it.
  -->
  <arg name="time_scale" default="1" />
  <arg name="headless" default="true" />

  <!-- train mode  -->
  <arg name="train_mode" default="true"/>

  <arg name="inter_planner" default="bypass"/>
  <arg name="local_planner" default="rosnav"/>

  <arg name="model" default="burger"      doc="model type [burger, jackal, ridgeback, agvota, rto, rto_real]"/>
  <!-- the folder name under the path simulator_setup/maps  -->
  <arg name="map_folder_name" default="map_empty" />

  <param name="map_file" value="$(arg map_folder_name)" />
  <param name="map_layer_path" value="$(find arena_simulation_setup)/worlds/$(arg map_folder_name)/map/map.world.yaml" />

  <arg name="entity_manager" default="crowdsim" doc="[flatland, pedsim, crowdsim]" />
  <arg name="sfm" default="pysocial" doc="sfm for crowdsim [passthrough, pysocial]"/>
  <arg name="world_file" default=""/>

  <param name="entity_manager" value="$(arg entity_manager)" />

  <!-- if it's false flatland server will not publish any debug related infomation and you will not able to visuzalize e.g robot, dynamic obstacles  -->
  <rosparam file="$(find arena_bringup)/configs/task_generator.yaml" command="load" ns="configuration"/>
  <rosparam command="load" file="$(find arena_simulation_setup)/entities/robots/$(arg model)/model_params.yaml" />
  <rosparam command="load" file="$(find arena_simulation_setup)/entities/robots/$(arg model)/configs/mbf/plan_fsm_param.yaml"/> 

  <rosparam command="load" file="$(find arena_bringup)/params/flatland.yaml" />
  <rosparam command="load" file="$(find arena_bringup)/params/drl.yaml" />
  <rosparam command="load" file="$(find arena_bringup)/params/map_generator.yaml" ns="map_generator" />
  
  <!--  PARAMS DON'T CHANGE THEM  -->
  <param name="use_sim_time" value="true" />
  <param name="train_mode" value="$(arg train_mode)" />
  <param name="num_envs" value="$(arg num_envs)" />
  <arg name="map_path" default="$(find arena_simulation_setup)/worlds/$(arg map_folder_name)/map/map.yaml" />
  <param name="world_path" value="$(find arena_simulation_setup)/worlds/$(arg map_folder_name)/map/map.world.yaml" />
  <param name="map_path" value="$(arg map_path)" />
  <param name="model" value="$(arg model)" />

  <!-- map server-->
  <include file="$(find arena_bringup)/launch/utils/map_server.launch">
    <arg name="map_file" value="$(arg map_folder_name)"/>
    <arg name="map_path" value="$(arg map_path)"/>
  </include>

  <group if="$(eval arg('train_mode') == false)">
    <!-- makes sure that action's will be published according to sim time in eval mode-->
    <node name="action_publisher" pkg="arena_local_planner_drl" type="action_publisher.py"/>
  </group>

  <!-- set the log format -->
  <env name="ROSCONSOLE_FORMAT" value="[${severity} ${time} ${logger}]: ${message}" />
  <include file="$(find arena_bringup)/launch/training/single_env_training.launch">
    <arg name="ns" value="eval_sim" />
    <arg name="model" value="$(arg model)" />
    <arg name="SIMULATOR" value="$(arg simulator)" />
    <arg name="time_scale" value="$(arg time_scale)" />
    <arg name="headless" value="$(arg headless)" />
    <arg name="entity_manager" value="$(arg entity_manager)" />
    <arg name="sfm" value="$(arg sfm)" />
    <arg name="world_file" value="$(arg world_file)" />
    <arg name="inter_planner" value="$(arg inter_planner)" />
    <arg name="local_planner" value="$(arg local_planner)" />
  </include>

  <include file="$(find arena_bringup)/launch/training/start_envs.launch">
    <arg name="num_envs" value="$(arg num_envs)" />
    <arg name="ns_prefix" value="$(arg ns_prefix)" />
    <arg name="model" value="$(arg model)" />
    <arg name="SIMULATOR" value="$(arg simulator)" />
    <arg name="time_scale" value="$(arg time_scale)" />
    <arg name="headless" value="$(arg headless)" />
    <arg name="entity_manager" value="$(arg entity_manager)" />
    <arg name="sfm" value="$(arg sfm)" />
    <arg name="inter_planner" value="$(arg inter_planner)" />
    <arg name="local_planner" value="$(arg local_planner)" />
  </include> 
  
  <node pkg="task_generator" name="task_generator_server" type="server.py" output="screen"/>
  <node pkg="task_generator" name="task_generator_filewatcher" type="filewatcher.py" output="screen"/>

  <group if="$(eval arg('cfg') != '')">
    <node 
      pkg="training" name="training" type="train_agent.py" output="screen" 
      args="$(find arena_bringup)/configs/training/$(arg cfg)"
    />
    <param name="LEVERAGE_SIMS" value="true"/>
  </group>
</launch>