from abc import ABC, abstractmethod
from typing import ClassVar, List, Type, TypeVar

from ..collectors import BaseUnit

D = TypeVar("D")

from rl_utils.state_container import SimulationStateContainer


class ObservationGeneratorUnit(BaseUnit, ABC):
    """
    Base class for observation generator units.

    Attributes:
        name (str): The name of the observation generator unit.
        requires (List[BaseUnit]): A list of required base units.
        data_class (Type[D]): The type of data generated by the observation generator unit.
    """

    name: ClassVar[str] = ""
    requires: ClassVar[List[BaseUnit]] = []
    data_class: Type[D] = D

    @abstractmethod
    def generate(
        self,
        obs_dict: dict,
        simulation_state_container: SimulationStateContainer,
        *args,
        **kwargs
    ) -> D:
        """
        Generates the observation data based on the given observation dictionary.

        Args:
            obs_dict (dict): The observation dictionary.

        Returns:
            D: The generated observation data.
        """
        raise NotImplementedError
